#-----------------------------------------------------------------
# pycparser: _c_ast_gen.cfg
#
# Defines the AST Node classes used in pyRAPIDparser.
# 
# Each entry is a Node sub-class name, listing the attributes
# and child nodes of the class:
#   <name>*     - a child node
#   <name>**    - a sequence of child nodes
#   <name>      - an attribute
#

#-----------------------------------------------------------------

# This is the top of the AST, representing a single RAPID file
#

# name will be a string or None
IdentifierAST: [ name ]

#module_list is list of ModuleAST
ModulesAST : [ module_list ** ]


#name will be a string
ModuleAttributeAST: [ name ]

# module_name is IdentifierAST
# module_attribute is list of ModuleAttributeAST
# type_definitions is list of (CommentAST, TypeDefAST)
# data_definitions is list of (CommentAST, DataDefATS)
# routine_definitions is list of (CommentAST, RoutineDeclarationATS)
ModuleAST: [ module_name*, module_attribute**, type_definitions**, data_definitions**, routine_definitions** ]

# comment is a String without the first !
CommentAST: [ comment ]

#type is a string="LOCAL" or None
#definition is RecordDefAST or AliasDefATS or None
TypeDefAST: [ type, definition* ]

# record_name is IdentifierAST
# components is is list of (RecordComponentDefAST)
RecordDefAST: [ record_name*, components** ]

# data_type is IdentifierAST
# record_component_name is IdentifierAST
RecordComponentDefAST: [ data_type*, record_component_name* ]

# type_name is IdentifierAST
# alias_name is IdentifierAST
AliasDefATS: [ type_name*, alias_name* ]

#type is a string="LOCAL" or None
#definition is None or VarDeclarationAST or PersDeclarationAST or ConstDeclarationAST
DataDefATS: [ type, definition* ]

#type is a string="LOCAL" or None
#definition is None or ProcedureDeclarationAST or FunctionDeclarationAST or TrapDeclarationAST
RoutineDeclarationATS: [ type, definition* ]

#value is int or float or string
LiteralATS: [ value ]

# type is IdentifierAST
# variable_instance is a VarDefinitionAST
VarDeclarationAST: [ type*, variable_instance* ]

# type is IdentifierAST
# variable_instance is a VarDefinitionAST
PersDeclarationAST: [ type*, variable_instance* ]

# type is IdentifierAST
# variable_instance is a VarDefinitionAST
ConstDeclarationAST : [ type*, variable_instance* ]

# name is IdentifierAST
# value is None or ConstExpressionAST
# size is a list of ConstExpressionAST
VarDefinitionAST: [ name*, value*, size** ]

# expression is ExpressionAST
ConstExpressionAST: [expression*]

# expr is None or AggregateAST or Operator1AST or Operator2AST or FunctionCallAST or VariableAST or ExpressionAST or LiteralATS
ExpressionAST: [ expr* ]

# operator is a string ("NOT")
# par1 is AggregateAST or Operator1AST or Operator2AST or FunctionCallAST or VariableAST or ExpressionAST or LiteralATS
Operator1AST : [operator, par1]

# operator is a string ("+", "-", "*", "/", "DIV", "MOD", "OR", "XOR", "AND", "<", ">", "<=", ">=", "=", "<>")
# par1 is AggregateAST or Operator1AST or Operator2AST or FunctionCallAST or VariableAST or ExpressionAST or LiteralATS
# par2 is AggregateAST or Operator1AST or Operator2AST or FunctionCallAST or VariableAST or ExpressionAST or LiteralATS
Operator2AST : [operator, par1*, par2*]

#expr a list of AggregateAST or Operator1AST or Operator2AST or FunctionCallAST or VariableAST or ExpressionAST or LiteralATS
AggregateAST : [ expr** ]

#var can be None (for place holden) or IdentifierAST or VariableAST
#index list of AggregateAST or Operator1AST or Operator2AST or FunctionCallAST or VariableAST or ExpressionAST or LiteralATS
#component None or IdentifierAST (in case of a.b)
VariableAST: [ var*, index**, component* ]

#function is IdentifierAST or ExpressionAST
#arguments list of FunctionArgumentAST
FunctionCallAST : [ function*, arguments** ]

#procedure is IdentifierAST or ExpressionAST
#arguments list of ProcedureArgumentAST
ProcedureCallAST : [ procedure*, arguments** ]

#type "Required" or "Optional" or "Conditional" or None
#argumentname is IdentifierAST or None
#argumentvalue is ExpressionAST ... or VariableAST or None
FunctionArgumentAST : [ type, argumentname*, argumentvalue* ]

#type "Required" or "Optional" or "Conditional" or None
#argumentname is IdentifierAST or None
#argumentvalue is ExpressionAST ... or VariableAST or None
ProcedureArgumentAST : [ type, argumentname*, argumentvalue* ]

#procedure_name is IdentifierAST
#parameter_list list of ParameterDefinitionAST or OptionalParameterDefinitionAST or SwitchParameterDefinitionAST or None
#data_definitions list of  (CommentAST, DataDefATS)
#statement_list list of (CommentAST, StatementAST)
#routine_backward None or RoutineBackwardAST
#routine_error None or RoutineErrorAST
#routine_undo None or RoutineUndoAST
ProcedureDeclarationAST : [ procedure_name*, parameter_list**, data_definitions**, statement_list**, routine_backward*, routine_error*, routine_undo* ]

#data_type is IdentifierAST
#function_name is IdentifierAST
#parameter_list list of ParameterDefinitionAST or OptionalParameterDefinitionAST or SwitchParameterDefinitionAST or None
#data_definitions list of  (CommentAST, DataDefATS)
#statement_list list of (CommentAST, StatementAST)
#routine_error None or RoutineErrorAST
#routine_undo None or RoutineUndoAST
FunctionDeclarationAST : [ data_type*, function_name*, parameter_list**, data_definitions**, statement_list**, routine_error*, routine_undo* ]
TrapDeclarationAST : [ procedure_name*, data_definitions**, statement_list**, routine_error*, routine_undo* ]

RoutineBackwardAST : [ statement_list** ]
RoutineErrorAST : [ error_number_list**, statement_list** ]
RoutineUndoAST : [ statement_list** ]

#statement is (AssignmentStatementAST, GotoStatementAST, ReturnStatementAST, RaiseStatementAST, ExitStatementAST, RetryStatementAST, TrynextStatementAST, ConnectStatementAST, IfStatement, ElseIfStatement, ForStatement, WhileStatement, TestStatement, )
StatementAST: [ statement* ]

#name is IdentifierAST
LabelAST: [ name* ]

#dest is VariableAST
#source is ExpressionAST
AssignmentStatementAST : [ dest*, source* ]

#dest is IdentifierAST
GotoStatementAST : [ dest* ]

#result can be None or ExpressionAST
ReturnStatementAST : [ result* ]

#error_number is None or IdentifierAST or is a python number
RaiseStatementAST : [ error_number* ]

ExitStatementAST : [ ]
RetryStatementAST : [ ]
TrynextStatementAST : [ ]
ConnectStatementAST : [ connect_taget*, trap* ]

#condition is ExpressionAST
#statement_list is list of StatementAST
#elseif_list is list of ElseIfStatement
#else_statement_list is list of StatementAST
IfStatement: [ condition*, statement_list**, elseif_list**, else_statement_list** ]

#condition is ExpressionAST
#statement_list is list of StatementAST
ElseIfStatement: [ condition*, statement_list** ]

#loop_variable is IdentifierAST
#ifrom is ExpressionAST
#ito is ExpressionAST
#istep is ExpressionAST
#statement_list list of StatementAST
ForStatement: [ loop_variable*, ifrom*, ito*, istep*, statement_list** ]

#condition is ExpressionAST
#statement_list list of StatementAST
WhileStatement: [ condition*, statement_list** ]

#expression is ExpressionAST
#cases list of CaseStatement
#default list of StatementAST
TestStatement: [ expression*, cases**, default** ]

#test_value is ExpressionAST
#statement_list list of StatementAST
CaseStatement: [ test_value**, statement_list** ]

#parameter_type stringa
#type IdentifierAST
#name IdentifierAST
#size int or None
ParameterDefinitionAST: [ parameter_type, type*, name*, size ]

#name IdentifierAST
SwitchParameterDefinitionAST: [ name* ]

#parameter None or ParameterDefinitionAST or SwitchParameterDefinitionAST
#switchs list of None or ParameterDefinitionAST or SwitchParameterDefinitionAST
OptionalParameterDefinitionAST : [ parameter*, switchs** ]




