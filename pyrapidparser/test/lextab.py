# pyRAPIDparser.lextab.py. This file automatically created by PLY (version 3.4). Don't edit!
_tabversion   = '3.4'
_lextokens    = {'ENDPROC': 1, 'LBRACKET': 1, 'FLOAT_CONST': 1, 'PLACEHOLDER_ALT': 1, 'NOSTEPIN': 1, 'WITH': 1, 'MINUS': 1, 'COMMENT': 1, 'RPAREN': 1, 'RECORD': 1, 'LOCAL_PROC': 1, 'PERS': 1, 'PLUS': 1, 'TRYNEXT': 1, 'GT': 1, 'GOTO': 1, 'PERIOD': 1, 'MODULE': 1, 'GE': 1, 'INT_CONST_DEC': 1, 'PLACEHOLDER_ARG': 1, 'ENDIF': 1, 'VAR': 1, 'ENDFUNC': 1, 'PLACEHOLDER_PAR': 1, 'INT_CONST_OCT': 1, 'ELSEIF': 1, 'OR': 1, 'PLACEHOLDER_ID': 1, 'RETURN': 1, 'INOUT': 1, 'PLACEHOLDER_VAR': 1, 'TASK_PERS': 1, 'TRUE': 1, 'LOCAL_PERS': 1, 'READONLY': 1, 'COLON': 1, 'CONNECT': 1, 'BACKWARD': 1, 'DIVIDE': 1, 'FOR': 1, 'EQUALS': 1, 'ELSE': 1, 'FUNC': 1, 'ERROR': 1, 'EQ': 1, 'AND': 1, 'ENDWHILE': 1, 'LBRACE': 1, 'PLACEHOLDER_DDN': 1, 'NOT': 1, 'PROC': 1, 'MOD': 1, 'THEN': 1, 'RAISE': 1, 'ENDTRAP': 1, 'DEFAULT': 1, 'ENDTEST': 1, 'WHILE': 1, 'CASE': 1, 'INT_CONST': 1, 'CONSLASH': 1, 'NE': 1, 'PIPE': 1, 'LOCAL_FUNC': 1, 'ENDFOR': 1, 'NOVIEW': 1, 'PLACEHOLDER_EIT': 1, 'INT_CONST_HEX': 1, 'LOCAL_CONST': 1, 'LOCAL_ALIAS': 1, 'FALSE': 1, 'LOCAL_VAR': 1, 'LOCAL_TRAP': 1, 'CONDOP': 1, 'TASK_VAR': 1, 'EXIT': 1, 'TRAP': 1, 'INT_CONST_BIN': 1, 'DO': 1, 'RETRY': 1, 'CONST': 1, 'UNDO': 1, 'PLACEHOLDER_RDN': 1, 'STEP': 1, 'DIV': 1, 'RBRACE': 1, 'VIEWONLY': 1, 'LE': 1, 'SEMI': 1, 'PLACEHOLDER_DIM': 1, 'TO': 1, 'LT': 1, 'COMMA': 1, 'ENDMODULE': 1, 'LOCAL_RECORD': 1, 'XOR': 1, 'PERCENT': 1, 'TIMES': 1, 'ALIAS': 1, 'SYSMODULE': 1, 'PLACEHOLDER_EXP': 1, 'LPAREN': 1, 'ID': 1, 'IF': 1, 'FROM': 1, 'STRING_LITERAL': 1, 'switch': 1, 'PLACEHOLDER_SMT': 1, 'PLACEHOLDER_CSE': 1, 'TEST': 1, 'RBRACKET': 1, 'PLACEHOLDER_TDN': 1, 'ENDRECORD': 1}
_lexreflags   = 0
_lexliterals  = ''
_lexstateinfo = {'INITIAL': 'inclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_LOCAL_PROC>LOCAL[\\t\\ ]+PROC)|(?P<t_LOCAL_FUNC>LOCAL[\\t\\ ]+FUNC)|(?P<t_LOCAL_TRAP>LOCAL[\\t\\ ]+TRAP)|(?P<t_LOCAL_VAR>LOCAL[\\t\\ ]+VAR)|(?P<t_LOCAL_CONST>LOCAL[\\t\\ ]+CONST)|(?P<t_LOCAL_PERS>LOCAL[\\t\\ ]+PERS)|(?P<t_TASK_VAR>TASK[\\t\\ ]+VAR)|(?P<t_TASK_PERS>TASK[\\t\\ ]+PERS)|(?P<t_LOCAL_RECORD>LOCAL[\\t\\ ]+RECORD)|(?P<t_LOCAL_ALIAS>LOCAL[\\t\\ ]+ALIAS)|(?P<t_NEWLINE>\\n+)|(?P<t_STRING_LITERAL>"([^"\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(x[0-9a-fA-F]+))))*")|(?P<t_COMMENT>!.*(\\n|\\D))|(?P<t_FLOAT_CONST>((((([0-9]*\\.[0-9]+)|([0-9]+\\.))([eE][-+]?[0-9]+)?)|([0-9]+([eE][-+]?[0-9]+)))[FfLl]?))|(?P<t_INT_CONST_HEX>0[xX][0-9a-fA-F]+)|(?P<t_BIN_CONST>0[bB][0-1]+)|(?P<t_INT_CONST>[0-9]+)|(?P<t_INT_CONST_DEC>0[dD][0-9]+)|(?P<t_UNMATCHED_QUOTE>(\'([^\'\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(x[0-9a-fA-F]+))))*\\n)|(\'([^\'\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(x[0-9a-fA-F]+))))*$))|(?P<t_BAD_CHAR_CONST>(\'([^\'\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(x[0-9a-fA-F]+))))[^\'\n]+\')|(\'\')|(\'([\\\\][^a-zA-Z._~^!=&\\^\\-\\\\?\'"x0-7])[^\'\\n]*\'))|(?P<t_BAD_STRING_LITERAL>"([^"\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(x[0-9a-fA-F]+))))*([\\\\][^a-zA-Z._~^!=&\\^\\-\\\\?\'"x0-7])([^"\\\\\\n]|(\\\\(([a-zA-Z._~!=&\\^\\-\\\\?\'"])|(x[0-9a-fA-F]+))))*")|(?P<t_ID>[a-zA-Z_][0-9a-zA-Z_]*)|(?P<t_PLACEHOLDER_TDN><TDN>)|(?P<t_PLACEHOLDER_VAR><VAR>)|(?P<t_PLACEHOLDER_CSE><CSE>)|(?P<t_PLACEHOLDER_EXP><EXP>)|(?P<t_PLACEHOLDER_DIM><DIM>)|(?P<t_PLACEHOLDER_ARG><ARG>)|(?P<t_PLACEHOLDER_SMT><SMT>)|(?P<t_PLACEHOLDER_RDN><RDN>)', [None, ('t_LOCAL_PROC', 'LOCAL_PROC'), ('t_LOCAL_FUNC', 'LOCAL_FUNC'), ('t_LOCAL_TRAP', 'LOCAL_TRAP'), ('t_LOCAL_VAR', 'LOCAL_VAR'), ('t_LOCAL_CONST', 'LOCAL_CONST'), ('t_LOCAL_PERS', 'LOCAL_PERS'), ('t_TASK_VAR', 'TASK_VAR'), ('t_TASK_PERS', 'TASK_PERS'), ('t_LOCAL_RECORD', 'LOCAL_RECORD'), ('t_LOCAL_ALIAS', 'LOCAL_ALIAS'), ('t_NEWLINE', 'NEWLINE'), ('t_STRING_LITERAL', 'STRING_LITERAL'), None, None, None, None, None, ('t_COMMENT', 'COMMENT'), None, ('t_FLOAT_CONST', 'FLOAT_CONST'), None, None, None, None, None, None, None, None, None, ('t_INT_CONST_HEX', 'INT_CONST_HEX'), ('t_BIN_CONST', 'BIN_CONST'), ('t_INT_CONST', 'INT_CONST'), ('t_INT_CONST_DEC', 'INT_CONST_DEC'), ('t_UNMATCHED_QUOTE', 'UNMATCHED_QUOTE'), None, None, None, None, None, None, None, None, None, None, None, None, ('t_BAD_CHAR_CONST', 'BAD_CHAR_CONST'), None, None, None, None, None, None, None, None, None, ('t_BAD_STRING_LITERAL', 'BAD_STRING_LITERAL'), None, None, None, None, None, None, None, None, None, None, None, ('t_ID', 'ID'), (None, 'PLACEHOLDER_TDN'), (None, 'PLACEHOLDER_VAR'), (None, 'PLACEHOLDER_CSE'), (None, 'PLACEHOLDER_EXP'), (None, 'PLACEHOLDER_DIM'), (None, 'PLACEHOLDER_ARG'), (None, 'PLACEHOLDER_SMT'), (None, 'PLACEHOLDER_RDN')]), ('(?P<t_PLACEHOLDER_PAR><PAR>)|(?P<t_PLACEHOLDER_DDN><DDN>)|(?P<t_PLACEHOLDER_EIT><EIT>)|(?P<t_PLACEHOLDER_ALT><ALT>)|(?P<t_PLACEHOLDER_ID><ID>)|(?P<t_PLUS>\\+)|(?P<t_LBRACE>\\{)|(?P<t_CONSLASH>\\\\)|(?P<t_RBRACKET>\\])|(?P<t_CONDOP>\\?)|(?P<t_EQUALS>:=)|(?P<t_PIPE>\\|)|(?P<t_LE><=)|(?P<t_LPAREN>\\()|(?P<t_RBRACE>\\})|(?P<t_NE><>)|(?P<t_PERIOD>\\.)|(?P<t_TIMES>\\*)|(?P<t_LBRACKET>\\[)|(?P<t_GE>>=)|(?P<t_RPAREN>\\))|(?P<t_LT><)|(?P<t_COMMA>,)|(?P<t_PERCENT>%)|(?P<t_EQ>=)|(?P<t_DIVIDE>/)|(?P<t_SEMI>;)|(?P<t_MINUS>-)|(?P<t_GT>>)|(?P<t_COLON>:)', [None, (None, 'PLACEHOLDER_PAR'), (None, 'PLACEHOLDER_DDN'), (None, 'PLACEHOLDER_EIT'), (None, 'PLACEHOLDER_ALT'), (None, 'PLACEHOLDER_ID'), (None, 'PLUS'), (None, 'LBRACE'), (None, 'CONSLASH'), (None, 'RBRACKET'), (None, 'CONDOP'), (None, 'EQUALS'), (None, 'PIPE'), (None, 'LE'), (None, 'LPAREN'), (None, 'RBRACE'), (None, 'NE'), (None, 'PERIOD'), (None, 'TIMES'), (None, 'LBRACKET'), (None, 'GE'), (None, 'RPAREN'), (None, 'LT'), (None, 'COMMA'), (None, 'PERCENT'), (None, 'EQ'), (None, 'DIVIDE'), (None, 'SEMI'), (None, 'MINUS'), (None, 'GT'), (None, 'COLON')])]}
_lexstateignore = {'INITIAL': ' \t'}
_lexstateerrorf = {'INITIAL': 't_error'}
